---
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__METRICS__STATSD_ON: 'True'
    AIRFLOW__METRICS__STATSD_HOST: 'airflow-statsd-exporter'
    AIRFLOW__METRICS__STATSD_PORT: 9125
    AIRFLOW__METRICS__STATSD_PREFIX: 'airflow'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-apache-spark apache-airflow-providers-apache-kafka kafka-python kafka-python-ng resend python-dotenv"
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config/airflow_local_settings.py:/opt/airflow/airflow_local_settings.py
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /home/daniel/Documentos/Portafolio/Data engineer/datos_compartidos:/datos_compartidos
    - /home/daniel/airflow/airflow.cfg:/opt/airflow/airflow.cfg
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy



services:
    # COMPONENTES AIRFLOW
    postgres:
      image: postgres:13
      container_name: postgres
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
      volumes:
          - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
          test: ["CMD", "pg_isready", "-U", "airflow"]
          interval: 10s
          retries: 5
          start_period: 5s
      restart: always
      networks:
          - app_network

    redis:
      image: redis:latest
      container_name: redis
      healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 10s
          timeout: 30s
          retries: 50
          start_period: 30s
      restart: always
      networks:
        - app_network

    airflow-webserver:
      <<: *airflow-common
      command: webserver
      container_name: airflow-webserver
      ports:
        - "8080:8080"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
      networks:
        - app_network

    airflow-scheduler:
      <<: *airflow-common
      command: scheduler          
      container_name: airflow-scheduler
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
      networks:
        - app_network

    airflow-worker:
      <<: *airflow-common
      command: celery worker
      container_name: airflow-worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      environment:
        <<: *airflow-common-env
        DUMB_INIT_SETSID: "0"
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
      networks:
        - app_network

    airflow-triggerer:
      <<: *airflow-common
      container_name: airflow-triggerer
      command: triggerer
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
      networks:
        - app_network

    airflow-statsd-exporter:
      image: prom/statsd-exporter
      container_name: airflow-statsd-exporter
      ports:
        - "9102:9102" 
      networks:
        - app_network
    
    airflow-init:
      <<: *airflow-common
      container_name: airflow-init
      entrypoint: /bin/bash
      command:
        - -c
        - |
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
      user: "0:0"
      volumes:
        - ${AIRFLOW_PROJ_DIR:-.}:/sources
      networks:
        - app_network

    airflow-cli:
      <<: *airflow-common
      profiles:
        - debug
      environment:
        <<: *airflow-common-env
        CONNECTION_CHECK_MAX_COUNT: "0"
      command:
        - bash
        - -c
        - airflow
      networks:
        - app_network

    flower:
      <<: *airflow-common
      command: celery flower
      profiles:
        - flower
      ports:
        - "5555:5555"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
      networks:
        - app_network

    # COMPONENTES DE SPARK
    spark-master:
      build:
        context: ./spark
        dockerfile: Dockerfile
      container_name: spark-master
      hostname: spark-master
      environment:
        - SPARK_MODE=master
        - SPARK_MASTER_HOST=spark-master
        - JMX_EXPORTER_PORT=9108
      ports:
        - '7077:7077'
        - '8071:8070' 
        - '9108:9108'
      networks:
        - app_network
      volumes:
        - /home/daniel/Documentos/Portafolio/Data engineer/datos_compartidos:/datos_compartidos:rw

    spark-worker-1:
      build:
        context: ./spark
        dockerfile: Dockerfile
      container_name: spark-worker-1
      hostname: spark-worker-1
      environment:
        - SPARK_MODE=worker
        - SPARK_MASTER=spark://spark-master:7077
        - JMX_EXPORTER_PORT=9109
        - SPARK_WORKER_MEMORY=32G
        - SPARK_WORKER_CORES=6
      depends_on:
        - spark-master
      ports:
        - '8072:8070' 
        - '9109:9109'
      networks:
        - app_network
      volumes:
        - /home/daniel/Documentos/Portafolio/Data engineer/datos_compartidos:/datos_compartidos:rw

    spark-worker-2:
      build:
        context: ./spark
        dockerfile: Dockerfile
      container_name: spark-worker-2
      hostname: spark-worker-2
      environment:
        - SPARK_MODE=worker
        - SPARK_MASTER=spark://spark-master:7077
        - JMX_EXPORTER_PORT=9110
        - SPARK_WORKER_MEMORY=4G
        - SPARK_WORKER_CORES=2
      depends_on:
        - spark-master
      ports:
        - '8073:8070'
        - '9110:9110'
      networks:
        - app_network
      volumes:
        - /home/daniel/Documentos/Portafolio/Data engineer/datos_compartidos:/datos_compartidos:rw

    #COMPONENTES DE KAFKA
    zookeeper:
      image: wurstmeister/zookeeper
      container_name: zookeeper
      ports:
        - '2181:2181'
      networks:
        - app_network

    kafka:
      image: wurstmeister/kafka
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - '9092:9092'
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_CREATE_TOPICS: 'tareas_completadas:1:1'
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      networks:
        - app_network
    
    #COMPONENTES DE METRICAS
    prometheus:
      image: prom/prometheus
      container_name: prometheus
      volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"
      depends_on:
        - postgres-exporter
        - redis-exporter
        - kafka-exporter
      networks:
        - app_network
    
    postgres-exporter:
      image: wrouesnel/postgres_exporter
      container_name: postgres-exporter
      environment:
        DATA_SOURCE_NAME: postgres://airflow:airflow@postgres:5432/airflow?sslmode=disable
      ports:
        - "9187:9187"
      depends_on:
        - postgres
      networks:
        - app_network

    redis-exporter:
      image: oliver006/redis_exporter
      container_name: redis-exporter
      command: -redis.addr=redis:6379
      ports:
        - "9121:9121"
      depends_on:
        - redis
      networks:
        - app_network

    kafka-exporter:
      image: danielqsj/kafka-exporter
      container_name: kafka-exporter
      ports:
        - "9308:9308"
      command:
        - '--web.listen-address=:9308'
      environment:
        KAFKA_SERVER: kafka:9092
      depends_on:
        - kafka
      networks:
        - app_network
      restart: unless-stopped
    
    node-exporter:
      image: prom/node-exporter:latest
      container_name: node-exporter
      ports:
        - "9100:9100"
      restart: unless-stopped
      networks:
        - app_network  

    grafana:
      image: grafana/grafana:latest
      container_name: grafana
      ports:
        - "3000:3000"
      depends_on:
        - prometheus
      volumes:
        - grafana-storage:/var/lib/grafana
      networks:
        - app_network
      
    cadvisor:
      image: gcr.io/cadvisor/cadvisor:latest
      container_name: cadvisor
      ports:
        - "9091:8080"
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
      networks:
        - app_network

networks:
  app_network:

volumes:
  grafana-storage:
  postgres-db-volume: